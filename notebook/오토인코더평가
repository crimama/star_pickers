{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"오토인코더평가","provenance":[],"collapsed_sections":[],"mount_file_id":"1FmcYJx4jhfbMt1qh2GVFcrIPPQzkBJjU","authorship_tag":"ABX9TyOI8JeVaDw4UiOZRaQEDeN0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":53,"metadata":{"id":"KGBGNt8ui0OI","executionInfo":{"status":"ok","timestamp":1650523438675,"user_tz":-540,"elapsed":299,"user":{"displayName":"Hun","userId":"07972583068794560208"}}},"outputs":[],"source":["import pandas as pd \n","import numpy as np \n","import matplotlib.pyplot as plt \n","from tqdm import tqdm \n","import os \n","from glob import glob \n","import pickle\n","import tensorflow as tf "]},{"cell_type":"markdown","source":["#데이터 로드 "],"metadata":{"id":"DUfkx3Xoi9Bo"}},{"cell_type":"code","source":["with open('/content/drive/MyDrive/별떠라가자_공유폴더/AI파트/데이터/학습용/df_dict.pkl','rb') as f:\n","  df_dict = pickle.load(f)\n","id_list = list(df_dict.keys())"],"metadata":{"id":"6aLOhVCPi_H6","executionInfo":{"status":"ok","timestamp":1650524592502,"user_tz":-540,"elapsed":5528,"user":{"displayName":"Hun","userId":"07972583068794560208"}}},"execution_count":64,"outputs":[]},{"cell_type":"markdown","source":["#모델 로드 "],"metadata":{"id":"QI3k0yStjX3g"}},{"cell_type":"markdown","source":["# 전처리 "],"metadata":{"id":"6WwbuK1ZjAFl"}},{"cell_type":"code","source":["def cal_minmax():\n","  id = id_list[0]\n","  df= df_dict[id]\n","  df = np.array(df.drop(columns=['DATE','ID']))\n","\n","  for id in id_list[1:-2]:\n","    temp_df= df_dict[id]\n","    temp_df= np.array(temp_df.drop(columns=['DATE','ID']))\n","    df = np.vstack([df,temp_df])\n","    \n","  min = np.min(df,axis=0)\n","  max = np.max(df,axis=0)\n","  return min,max\n","\n","def scailng(df):\n","  global min,max\n","  scailed_df = (df-min)/(max-min)\n","  return scailed_df\n","  \n","def reshape_df(df):\n","  df = df.drop(columns = ['DATE','ID'])\n","  df = np.array(df).reshape(-1,19,6)\n","  return df \n","def train_valid_split():\n","  train = reshape_df(df_dict[id_list[0]])\n","  for id in id_list[1:-5]:\n","    temp_train = df_dict[id]\n","    temp_train = reshape_df(temp_train)\n","    train = np.vstack([train,temp_train])\n","\n","  valid = np.vstack([reshape_df(df_dict[id_list[-2]]),reshape_df(df_dict[id_list[-1]])])\n","  return train,valid"],"metadata":{"id":"m9ST6jQsjC3f","executionInfo":{"status":"ok","timestamp":1650524630594,"user_tz":-540,"elapsed":2,"user":{"displayName":"Hun","userId":"07972583068794560208"}}},"execution_count":70,"outputs":[]},{"cell_type":"markdown","source":["# 제너레이터 "],"metadata":{"id":"DrNMA8U2jH8u"}},{"cell_type":"code","source":["from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.utils import Sequence\n","import math\n","\n","class DataGenerator(Sequence):\n","  def __init__(self,df,\n","                 batch_size: int,\n","               shuffle : bool = False):\n","        self.shuffle = shuffle        \n","        self.df = df \n","        self.batch_size = batch_size\n","        \n","        \n","  def __len__(self):\n","    return math.ceil(len(self.df) / self.batch_size)\n","\n","  def on_epoch_end(self):\n","    self.indices = np.arange(len(self.df))\n","    if self.shuffle == True:\n","      np.random.shuffle(self.indices)\n","      self.df = self.df[self.indices]\n","    \n","  def __getitem__(self, index):\n","    self.batch_df = self.df[index*self.batch_size:(index+1)*self.batch_size]\n","    self.batch_df = scailng(self.batch_df).astype(np.float16)\n","    return_value = self.batch_df \n","    return return_value, return_value"],"metadata":{"id":"H6AWWOeajkpS","executionInfo":{"status":"ok","timestamp":1650523448273,"user_tz":-540,"elapsed":2,"user":{"displayName":"Hun","userId":"07972583068794560208"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["def make_generator(id):\n","  df = df_dict[id]\n","  test_df = reshape_df(df)\n","  test_generator = DataGenerator(test_df,128,False)\n","  return df,test_generator\n","def descailng(value):\n","  value = value*max + min\n","  return value "],"metadata":{"id":"QKlTAupDjKeb","executionInfo":{"status":"ok","timestamp":1650525148439,"user_tz":-540,"elapsed":3,"user":{"displayName":"Hun","userId":"07972583068794560208"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["#스케일링용 min,max \n","train,valid = train_valid_split()\n","min,max = cal_minmax()"],"metadata":{"id":"h2ooEyQDnZYu","executionInfo":{"status":"ok","timestamp":1650524640686,"user_tz":-540,"elapsed":1992,"user":{"displayName":"Hun","userId":"07972583068794560208"}}},"execution_count":71,"outputs":[]},{"cell_type":"markdown","source":["# 모델 로드 "],"metadata":{"id":"mw6cJy3CnUji"}},{"cell_type":"code","source":["path = '/content/drive/MyDrive/Colab Notebooks/Hanyang_repo/별따러가자/model/0421_8벡터_mean_19_6'\n","Autoencoder = tf.keras.models.load_model(os.path.join(path,'autoencoder1.h5'),compile=False)"],"metadata":{"id":"JiL9zvJCnWGg","colab":{"base_uri":"https://localhost:8080/","height":398},"executionInfo":{"status":"error","timestamp":1650529612921,"user_tz":-540,"elapsed":4,"user":{"displayName":"Hun","userId":"07972583068794560208"}},"outputId":"1ce6d4cd-4160-4e7d-a701-ece9ae1b9791"},"execution_count":83,"outputs":[{"output_type":"error","ename":"OSError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-83-f2b6620ea7f6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'/content/drive/MyDrive/Colab Notebooks/Hanyang_repo/별따러가자/model/0421_8벡터_mean_19_6'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mAutoencoder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'autoencoder1.h5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/saving/save.py\u001b[0m in \u001b[0;36mload_model\u001b[0;34m(filepath, custom_objects, compile, options)\u001b[0m\n\u001b[1;32m    202\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_str\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexists\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_str\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 204\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mIOError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'No file or directory found at {filepath_str}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    205\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    206\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_str\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mOSError\u001b[0m: No file or directory found at /content/drive/MyDrive/Colab Notebooks/Hanyang_repo/별따러가자/model/0421_8벡터_mean_19_6/autoencoder1.h5"]}]},{"cell_type":"markdown","source":["# 예측 "],"metadata":{"id":"oL4fMCLCnWew"}},{"cell_type":"code","source":["predicted_dict = {} \n","for id in tqdm(id_list):\n","  df,test_generator = make_generator(id)\n","  y_ = Autoencoder.predict(test_generator)\n","  y_ = descailng(y_)\n","  y_ = pd.DataFrame(y_.reshape(-1,6))\n","  y_.columns = ['ACCEL_X','ACCEL_Y','ACCEL_Z','GYRO_X','GYRO_Y','GYRO_Z']\n","  predicted_dict[id] = y_"],"metadata":{"id":"mltSxyfJjuwX","executionInfo":{"status":"ok","timestamp":1650525412536,"user_tz":-540,"elapsed":253757,"user":{"displayName":"Hun","userId":"07972583068794560208"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"62cb7d41-706e-4ff7-ec35-034a6e3b266b"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 22/22 [04:13<00:00, 11.52s/it]\n"]}]},{"cell_type":"markdown","source":["#평가 "],"metadata":{"id":"RoEBz_Y3kT3l"}},{"cell_type":"code","source":["id = id_list[1]\n","predicted = predicted_dict[id].values"],"metadata":{"id":"7GVuNYuMl1b5","executionInfo":{"status":"ok","timestamp":1650525412537,"user_tz":-540,"elapsed":5,"user":{"displayName":"Hun","userId":"07972583068794560208"}}},"execution_count":79,"outputs":[]},{"cell_type":"code","source":["df = df_dict[id].drop(columns = ['DATE','ID']).values"],"metadata":{"id":"EUf0bKblo4bS","executionInfo":{"status":"ok","timestamp":1650525412537,"user_tz":-540,"elapsed":3,"user":{"displayName":"Hun","userId":"07972583068794560208"}}},"execution_count":80,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(10,7))\n","plt.hist(df - predicted,bins=15)\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":429},"id":"7WuzBNcCpQM4","executionInfo":{"status":"ok","timestamp":1650525412981,"user_tz":-540,"elapsed":447,"user":{"displayName":"Hun","userId":"07972583068794560208"}},"outputId":"2b9a9a75-854d-4224-fe3c-916e1f183711"},"execution_count":81,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["288781*6"],"metadata":{"id":"ehcQNwXkqMgd","executionInfo":{"status":"ok","timestamp":1650520026232,"user_tz":-540,"elapsed":296,"user":{"displayName":"Hun","userId":"07972583068794560208"}},"outputId":"0b3173ce-c12d-4d4b-a084-5e0e0163ae36","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1732686"]},"metadata":{},"execution_count":52}]}]}